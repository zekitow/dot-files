require 'spec_helper'
require 'net/http'
require 'fakeweb'

describe ImportersController do

  describe "GET 'index'" do
    context "listing importers by date" do
      let(:time_now) { Time.now }

      before :each do

        create(:partner)
        create(:importer, :start_time => Time.parse('2012-03-01'), :end_time=>Time.parse('2012-03-01'), :partner_id => Partner.first.id)
        create(:importer, :start_time => Time.parse('2012-03-03'), :end_time=>Time.parse('2012-03-04'), :partner_id => Partner.first.id)
        create(:importer, :start_time => Time.parse('2012-03-05'), :end_time=>Time.parse('2012-03-06'), :partner_id => Partner.first.id)
        create(:importer, :start_time => Time.parse("2012-03-08"), :end_time=>Time.parse('2012-03-09'), :partner_id => Partner.first.id)
        create(:importer, :start_time => time_now, :end_time=>time_now, :partner_id => Partner.first.id)
      end

      it "should always render the index template" do
        get 'index'
        response.should render_template('index')
      end

      it "should return nothing due to no log found in the period" do
        get :index, :start_time => "2012-01-10", :end_time => "2012-01-10"
        assigns[:importers].size.should == 0
      end

      it "should list Importers by start_time" do
        get :index, :start_time => Time.now
        assigns[:importers].size.should == 1
      end

      it "should list Importers by end_time" do
        get :index, :end_time => Time.now
        assigns[:importers].size.should == 1
      end

      it "should Importer using unformatted end_time" do
        get :index, :end_time => "20120225102030"
        assigns[:importers].size.should == 0
      end

      it "should return Importer from now if some date were invalid" do
        get :index, :start_time => "2012-13-13", :end_time => "2012-13-13"
        assigns[:importers].size.should == 1
      end

      it "should list Importers by end_time" do
        time_now = Time.now
        get :index, :start_time => "2012-01-01", :end_time => time_now
        assigns[:importers].first[:end_time] == time_now.getutc
        assigns[:importers].last[:end_time] == Time.parse('2012-03-01').getutc
      end
    end

    context "listing importers by partner and date" do
      before :each do
        @partner1 = create(:partner, :name => "Partner 1")
        @partner2 = create(:partner, :name => "Partner 2")
        create(:importer, :partner_id => @partner1.id, :start_time => "2012-02-25", :end_time => "2012-02-28", :status => Importer::STATUS_SUCCESS)
        create(:importer, :partner_id => @partner1.id, :start_time => "2012-02-26", :end_time => "2012-02-28", :status => Importer::STATUS_SUCCESS)
        create(:importer, :partner_id => @partner1.id, :start_time => "2012-02-27", :end_time => "2012-02-28", :status => Importer::STATUS_SUCCESS)
        create(:importer, :partner_id => @partner2.id, :start_time => "2012-02-26", :end_time => "2012-02-28")
      end

      it "should filter log list for partner name and date" do
        get :index, :partner_slug => @partner2.slug, :start_time => "2012-02-25", :end_time => "2012-02-29"
        assigns[:importers].size.should == 1
        get :index, :partner_slug => @partner1.slug, :start_time => "2012-02-26", :end_time => "2012-02-28"
        assigns[:importers].size.should == 3
      end
    end
  end

  describe "POST 'create'" do
    before :each do
      Partner.delete_all
      Product.delete_all
      Legacy::Parceiro.delete_all
      Legacy::Produto.delete_all
      Importer.delete_all
      ResqueSpec.reset!
      @partner_name = "oioioi"
      @parceiro = create(:parceiro, :nome => @partner_name)
      @partner = create(:partner, :name => @partner_name, :legacy_id => @parceiro.id)
      5.times {create(:produto, :parceiro => @parceiro)}
      @url_import = "#{Settings.importer.url}#{@parceiro.id}"
    end

    context "creating successfully an importer" do
      it "should create an importer successfully" do
        FakeWeb.allow_net_connect = false
        FakeWeb.register_uri(:post, @url_import, :status => ["200","transaction accepted"])
        post :create, :partner_slug => @partner.slug
        response.code.should == "201"
      end
    end

    context "creating unsuccessfully an importer" do
      it "should create an importer with an invalid partner" do
        post :create, :partner_slug => "aiaiai"
        response.code.should == "404"
      end

      it "should tell if could not connect do java import" do
        FakeWeb.allow_net_connect = false
        Net::HTTP.should_receive(:post_form).with(any_args()).and_raise(TypeError)
        post :create, :partner_slug => @partner.slug
        response.code.should == "502"
      end
    end

    context "when create another importer" do
      before :each do
        Partner.delete_all
        Product.delete_all
        Legacy::Parceiro.delete_all
        Legacy::Produto.delete_all
        Importer.delete_all
        ResqueSpec.reset!
        @partner_name = "oioioi"
        @parceiro = create(:parceiro, :nome => @partner_name)
        @partner = create(:partner, :name => @partner_name, :legacy_id => @parceiro.id)
        5.times {create(:produto, :parceiro => @parceiro)}
      end

      it "should create an importer successfully from same partner" do
        @url_import = "#{Settings.importer.url}#{@parceiro.id}"
        FakeWeb.allow_net_connect = false
        FakeWeb.register_uri(:post, @url_import, :status => ["200","transaction accepted"])
        @importer = create(:importer, :partner_id => @partner.id, :status => Importer::STATUS_SUCCESS)
        5.times {create(:produto, :parceiro => @parceiro)}
        post :create, :partner_slug => @partner.slug
        response.code.should == "201"
      end

      it "should create an importer successfully from different partners" do
        @importer = create(:importer, :partner_id => @partner.id, :status => Importer::STATUS_SUCCESS)
        @parceiro2 = create(:parceiro, :nome => "Juquinha")
        @partner2 = create(:partner, :name => "Juquinha", :legacy_id => @parceiro2.id)
        @url_import = "#{Settings.importer.url}#{@parceiro2.id}"
        FakeWeb.allow_net_connect = false
        FakeWeb.register_uri(:post, @url_import, :status => ["200","transaction accepted"])
        5.times {create(:produto, :parceiro => @parceiro2)}
        post :create, :partner_slug => @partner2.slug
        response.code.should == "201"
      end

      it "should say that a partner is currently being imported" do
        @url_import = "#{Settings.importer.url}#{@parceiro.id}"
        FakeWeb.allow_net_connect = false
        FakeWeb.register_uri(:post, @url_import, :status => ["200","transaction accepted"])
        @url_import = "#{Settings.importer.url}#{@parceiro.id}"
        FakeWeb.allow_net_connect = false
        FakeWeb.register_uri(:post, @url_import, :status => ["200","transaction accepted"])
        post :create, :partner_slug => @partner.slug
        response.code.should == "201"
        post :create, :partner_slug => @partner.slug
        response.code.should == "409"
      end
    end

  end

  describe "PUT 'update'" do
    context "when callback importer have OK status" do
      before :each do
        Partner.delete_all
        Product.delete_all
        Legacy::Parceiro.delete_all
        Legacy::Produto.delete_all
        Importer.delete_all
        ResqueSpec.reset!
        @partner_name = "oioioi"
        @parceiro = create(:parceiro, :nome => @partner_name)
        @partner = create(:partner, :name => @partner_name, :legacy_id => @parceiro.id)
        5.times {create(:produto, :parceiro => @parceiro)}
        @url_import = "#{Settings.importer.url}#{@parceiro.id}"
      end

      it "should callback" do
        FakeWeb.allow_net_connect = false
        FakeWeb.register_uri(:post, @url_import, :status => ["200","transaction accepted"])
        post :create, :partner_slug => @partner.slug
        response.should be_success
        importer = Importer.last_execution(@partner.id)
        import = JSON.parse(File.read('spec/resources/log_import_ok.json'))
        put :update, :id => importer.id, :import_metrics => import.to_json
        response.code.should == "200"
      end
    end

    context "when callback importer have ERROR status" do
      before :each do
        Partner.delete_all
        Product.delete_all
        Legacy::Parceiro.delete_all
        Legacy::Produto.delete_all
        Importer.delete_all
        ResqueSpec.reset!
        @partner_name = "oioioi"
        @parceiro = create(:parceiro, :nome => @partner_name)
        @partner = create(:partner, :name => @partner_name, :legacy_id => @parceiro.id)
        5.times {create(:produto, :parceiro => @parceiro)}
        @url_import = "#{Settings.importer.url}#{@parceiro.id}"
      end

      it "should callback" do
        FakeWeb.allow_net_connect = false
        FakeWeb.register_uri(:post, @url_import, :status => ["200","transaction accepted"])
        post :create, :partner_slug => @partner.slug
        response.should be_success
        importer = Importer.last_execution(@partner.id)
        import = JSON.parse(File.read('spec/resources/log_import.json'))
        put :update, :id => importer.id, :import_metrics => import.to_json
        response.code.should == "200"
        Importer.count.should == 1
        importer = Importer.last_execution(@partner.id)
        importer.status.should == "ERROR"
      end
    end

    context "when update method has exception" do
      before :each do
        Partner.delete_all
        Product.delete_all
        Legacy::Parceiro.delete_all
        Legacy::Produto.delete_all
        Importer.delete_all
        ResqueSpec.reset!
        @partner_name = "oioioi"
        @parceiro = create(:parceiro, :nome => @partner_name)
        @partner = create(:partner, :name => @partner_name, :legacy_id => @parceiro.id)
        5.times {create(:produto, :parceiro => @parceiro)}
        @url_import = "#{Settings.importer.url}#{@parceiro.id}"
      end

      it "should callback" do
        FakeWeb.allow_net_connect = false
        FakeWeb.register_uri(:post, @url_import, :status => ["200","transaction accepted"])
        post :create, :partner_slug => @partner.slug
        response.should be_success
        importer = Importer.last_execution(@partner.id)
        import = JSON.parse(File.read('spec/resources/log_import_ok.json'))
        Iconv.stub!(:new).and_raise("error")
        put :update, :id => importer.id, :import_metrics => import.to_json
        response.code.should == "500"
      end
    end

  end
end

