require 'spec_helper'
require 'fakeweb'

describe "Importers" do

  FakeWeb.allow_net_connect = false
  let(:host) { "http://localhost:3000" }
  let(:uri) { "importers" }
  let(:url) { "#{host}/#{uri}" }
  let(:slug) { "nikita" }

  context "when creating an Importer successfully" do

    it "should create an importer successfully" do
      FakeWeb.register_uri(:post, url, :status => ["201", "transaction accepted"])
      CapProducts::Importer.create(host, slug).should be_true
    end
  end

  context "when creating an Importer unsuccessfully" do
    it "should not create an importer with an importation of same partner" do
      FakeWeb.register_uri(:post, url, :status => ["409"])
      result = CapProducts::Importer.create(host, slug)
      result.status.should == 409
    end

    it "should not create an importer with an invalid partner" do
      FakeWeb.register_uri(:post, url, :status => ["404"])
      result = CapProducts::Importer.create(host, slug)
      result.status.should == 404
    end

    it "should not create an importer when importer api server were not running" do
      FakeWeb.register_uri(:post, url, :status => ["502"])
      result = CapProducts::Importer.create(host, slug)
      result.status.should == 502
    end

    it "should not create an importer with an internal server error" do
      FakeWeb.register_uri(:post, url, :status => ["500"])
      result = CapProducts::Importer.create(host, slug)
      result.status.should == 500
    end

    it "should create an importer with an uncovered error" do
      FakeWeb.register_uri(:post, url, :status => ["555"])
      result = CapProducts::Importer.create(host, slug)
      result.status.should == 555
    end
  end

  context "when consulting an Importer successfully" do
    let(:id)  { "123" }
    let(:url) { "#{host}/#{uri}/#{id}" }
    let(:body) { File.open("spec/resources/importer.json").read() }
    let(:importer) { CapProducts::Importer.show(host, id).content }

    before(:all) do
      FakeWeb.register_uri(:get, url, :status => ["200"], :body => body)
    end

    it { importer.should_not be_nil }
    it { importer[:id].should              eq '4f63bda29ddd122adc000005' }
    it { importer[:created_at].should      eq DateTime.new(2012,03,16,19,24,34,'-03:00') }
    it { importer[:end_time].should        be_nil }
    it { importer[:error_details].should   eq "java.lang.UnsupportedOperationException" }
    it { importer[:import_time].should     eq 10 }
    it { importer[:imported_items].should  eq 10 }
    it { importer[:inserted_items].should  be_nil }
    it { importer[:status].should          eq 'ERROR' }
    it { importer[:status_messages].should be_nil }
    it { importer[:steps].should           eq ["Download do XML","Definindo lista de cores"]}
    it { importer[:start_time].should      eq DateTime.new(2012,03,16,22,24,34,'+00:00') }
    it { importer[:updated_items].should   be_nil }
    it { importer[:updated_at].should      eq DateTime.new(2012,03,16,19,24,34,'-03:00') }
    it { importer[:partner_slug].should    eq "anita" }
    it { importer[:ignored_items].should eq 1 }
  end

  context "when consulting an Importer unsuccessfully" do
    let(:id)  { "123" }
    let(:url) { "#{host}/#{uri}/#{id}" }

    it "should do not get Importer by Importer ID missing" do
      FakeWeb.register_uri(:get, url, :status => ["200"])
      lambda {CapProducts::Importer.show()}.should raise_error(ArgumentError)
    end

    it "should do not get Importer by Importer ID not found" do
      FakeWeb.register_uri(:get, url, :status => ["404"])
      result = CapProducts::Importer.show(host, id)
      result.status.should == 404
    end

    it "should do not get Importer by Importer ID malformed" do
      FakeWeb.register_uri(:get, url, :status => ["400"])
      result = CapProducts::Importer.show(host, id)
      result.status.should == 400
    end

    it "should do not get Importer by Invalid Parameters" do
      FakeWeb.register_uri(:get, url, :status => ["422"])
      result = CapProducts::Importer.show(host, id)
      result.status.should == 422
    end

    it "should do not get Importer by unconvered error" do
      FakeWeb.register_uri(:get, url, :status => ["555"])
      result = CapProducts::Importer.show(host, id)
      result.status.should == 555
    end
  end

  context "when listing Importers successfully" do
    let(:body)   { File.open("spec/resources/importers.json").read() }
    let(:params) { {:start_time => "2011-01-01", :end_time => "2011-01-20", :partner_slug => "anita"} }
    let(:url)    { "#{host}/#{uri}?start_time=2011-01-01&end_time=2011-01-20&partner_slug=anita" }

    it "should get some Importers" do
      FakeWeb.register_uri(:get, url, :status => ["200"], :body => body)
      CapProducts::Importer.find(host, params).content
    end
  end

  context "when listing Importers successfully" do
    let(:body)   { File.open("spec/resources/importers.json").read() }
    let(:params) { {:start_time => "2011-01-20", :end_time => "2011-01-20", :partner_slug => "anita"} }
    let(:url)    { "http://localhost:3000/importers?start_time=2011-01-20&end_time=2011-01-20&partner_slug=anita" }

    it "should do not get any Importer by Importer Slug not found" do
      FakeWeb.register_uri(:get, url, :status => ["404"], :body => body)
      CapProducts::Importer.find(host, params).status.should == 404
    end
  end

  context "when pagination" do
    let(:host)   { "http://localhost:3000" }
    let(:url)    { "http://localhost:3000/importers?start_time=2011-01-20&end_time=2011-01-20&partner_slug=anita" }
    let(:params) { {:start_time => "2011-01-20", :end_time => "2011-01-20", :partner_slug => "anita"} }
    let(:url_next) { "http://localhost:3000/importers?end_time=2012-03-18&page=2&start_time=2012-03-01" }
    let(:url_previous) { "http://localhost:3000/importers?end_time=2012-03-31&page=1&start_time=2011-01-01" }
    let(:first_page) { File.open("spec/resources/importers.json").read() }
    let(:next_page)  { File.open("spec/resources/importers_page2.json").read() }
    let(:importers_actual_page) { CapProducts::Importer.find(host, params).content }
    let(:importers_next_page)   { CapProducts::Importer.next_page(host, importers_actual_page).content }

    before(:each) do
      FakeWeb.register_uri(:get, url,          :status => ["200"], :body => first_page)
      FakeWeb.register_uri(:get, url_next,     :status => ["200"], :body => next_page)
      FakeWeb.register_uri(:get, url_previous, :status => ["200"], :body => first_page)
    end

    it "should go to next page" do
      items_count = importers_actual_page[:items].count + importers_next_page[:items].count
      items_count.should == 11
    end

    it "should go to previous page" do
      importers_previous = CapProducts::Importer.previous_page(host, importers_next_page).content
      importers_previous.should eq importers_actual_page
    end
  end
end

