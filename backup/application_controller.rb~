class ApplicationController < ActionController::Base

  rescue_from Mongoid::Errors::DocumentNotFound, :with => :not_found
  rescue_from BSON::InvalidObjectId, :with => :invalid_object_id

  def not_found(exception = nil)
    render :json => { :message => (exception ? "#{exception}" : "Document not found."),  :request => request.fullpath },
           :status => :not_found
  end

  def invalid_object_id(exception = nil)
    render :json => { :message => (exception ? "#{exception}" : "Illegal ObjectId format."), :request => request.fullpath },
           :status => :bad_request
  end

  def invalid_document_params(params, exception=nil)
    render :json => { :message => (exception ? "#{exception}" : "Invalid document parameters (#{params}). "), :request => request.fullpath },
           :status => :unprocessable_entity
  end

  def add_footer_info_to_json_paginate(items, start_time=nil, end_time=nil)
    result = {  :items => items,
                :items_per_page => items.per_page,
                :total_items => items.total_entries,
                :links => [],

    }

    result[:start_time] = start_time if start_time
    result[:end_time]   = end_time   if end_time

    result[:links] << { :href => page_url(items.next_page),
                        :rel => "next_page",
                        :type => "application/json"} unless items.next_page.nil?


    result[:links] << { :href => page_url(items.previous_page),
                        :rel => "previous_page",
                        :type => "application/json"} unless items.previous_page.nil?
    result
  end

  def page_url page_number
    par = params.merge("page"=>page_number)
    url_for par
  end

  def is_a_valid_date(str_date)
    ((Time.parse(str_date) rescue ArgumentError) == ArgumentError) ? false : true
  end

  def format_date_as_start_time(str_date, type)
    if (str_date.length == 8)
      if type then Time.parse(str_date).getutc.beginning_of_day else Time.parse(str_date).getutc.end_of_day end
    else
      Time.parse(str_date).getutc
    end
  end

  def parse_time(date, beginning_of_day)
    format_date_as_start_time(date, beginning_of_day) if is_a_valid_date(date)
  end

  def parse_start_time(start_time)
    parse_time(start_time, true) || Time.now.getutc.beginning_of_day
  end

  def parse_end_time(end_time)
    parse_time(end_time,  false) || Time.now.getutc.end_of_day
  end

  def immutable_fields(model, reject_keys, params)
    acceptable_fields = model.fields.keys - reject_keys
    hash = params.slice(*acceptable_fields)
    hash
  end

end

