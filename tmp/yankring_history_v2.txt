233,v
twilight,v
custom,v
cterm=bold,v
        time_now = Time.now,V
      <option value="desc">Decrescente</option>,v
sorting_field,v
import geditimport gtkimport os# Toggle menu item XMLui_manager_xml = """<ui>  <menubar name="MenuBar">    <menu name="ViewMenu" action="View">      <placeholder name="ViewOps_2">        <separator/>        <menuitem name="toggleMenuBar" action="toggleMenuBar"/>      </placeholder>    </menu>  </menubar></ui>"""class toggleMenuInstance:  def __init__(self, plugin, window):        self._window = window    self._plugin = plugin        # Find location of Toggle Menu config file (if it's possible)    try: self._config     = os.path.expanduser('~')+"/.toggleMenu"    except: self._config  = ""        # Get gEdit main menu bar object    self._manager     = self._window.get_ui_manager()    self._menuBar     = self._manager.get_widget("/ui/MenuBar")    self._menuVisible = True        # Append custom menu item and key shortcut to toggle menu bar    toggleMenuBar = (      'toggleMenuBar',      None,      _("Toggle Menu"),      '<Ctrl><Alt>M',      _("Show or Hide Menu Bar"),      self.toggle    )    self._action_group = gtk.ActionGroup("toggleMenuBar")    self._action_group.add_actions([toggleMenuBar])    self._manager.insert_action_group(self._action_group, -1)        self._ui_id = self._manager.add_ui_from_string(ui_manager_xml)        # Auto start with menu hidden?    try:      if os.path.exists(self._config):        self._menuBar.hide()        self._menuVisible = False            except: pass        # Track gedit window for sudden fullscreen movements    self._trackWindow_id = self._window.connect("window-state-event", self.trackWindow)      def trackWindow(self, window, callback_data):    if not callback_data.new_window_state & gtk.gdk.WINDOW_STATE_FULLSCREEN and callback_data.changed_mask & gtk.gdk.WINDOW_STATE_FULLSCREEN:      # If menu wasn't visible before fullscreen, hide it again (with fake toggle)      if not self._menuVisible:        self.toggle("_")          # Show menu, remove custom menu item & keyboard shortcut  def deactivate(self):    self._menuBar.show()    self._manager.remove_ui(self._ui_id)    self._manager.ensure_update()        self._window.disconnect(self._trackWindow_id)        del self    # Toggle menu bar and save current status in file (kinda)  def toggle(self, action):    if self._menuBar.flags() & gtk.VISIBLE:            self._menuBar.hide()      self._menuVisible = False            try: open(self._config, 'w').close()      except: pass        else:            self._menuBar.show()      self._menuVisible = True            try: os.unlink(self._config)      except: pass# Basic gedit plugin structure (nothing interesting)class toggleMenuPlugin(gedit.Plugin):  def __init__(self):    gedit.Plugin.__init__(self)    self._instances = {}    def activate(self, window):    self._instances[window] = toggleMenuInstance(self, window)      def deactivate(self, window):    self._instances[window].deactivate()    del self._instances[window]      def update_ui(self, window):    pass,v
toggleMenu.py,v
        puts "#{assigns[:importers].last[:end_time]} == #{Time.parse('2012-03-01').getutc}",V
        puts "#{assigns[:importers].first[:end_time]} == #{time_now.getutc}",V
first,v
Time.parse('2012-03-01').getutc,v
time_now.getutc,v
        puts "#{assigns[:importers].first[:end_time]} == #{time_now.getutc}",v
(,v
parse,v
.,v
Time,v
s,v
Tparse,v
),v
e,v
,V
Time.parse(assigns[:importers].first[:end_time]) == Time.parse(time_now),v
ImportersController,v
Gemfile.lock,v
config/initializers/quiet_assets.rb,v
{"items":[{"_id":"4f64cf039ddd122adc00000c",          "start_time":"2012-03-17T16:38:14+00:00",          "status":"ERROR","partner_id":"4f63ba079ddd122adc000001",          "import_time":0,          "created_at":"2012-03-17T14:50:59-03:00",          "updated_at":"2012-03-17T14:50:59-03:00"}],"total_items":11,"items_per_page":10,"links":[{"rel":"self","type":"application/json","href":"http://localhost:3000/importers?end_time=2012-03-31&page=2&start_time=2011-01-01"},{"rel":"previous_page","type":"application/json","href":"/importers?end_time=2012-03-31&page=1&start_time=2011-01-01"}]},v
  context "when consulting an Importer successfully" do    before(:all) do      @host = "http://localhost:3000"      FakeWeb.allow_net_connect = false      id = "123"      @url = "http://localhost:3000/importers/#{id}"      body = File.open("spec/resources/importer.json").read()      FakeWeb.register_uri(:get, @url, :status => ["200"], :body => body)      @importer = CapProducts::Importer.show(@host, id).content    end    it { @importer.should_not be_nil }    it { @importer[:id].should              eq '4f63bda29ddd122adc000005' }    it { @importer[:created_at].should      eq DateTime.new(2012,03,16,19,24,34,'-03:00') }    it { @importer[:end_time].should        be_nil }    it { @importer[:error_details].should   eq "java.lang.UnsupportedOperationException" }    it { @importer[:import_time].should     eq 10 }    it { @importer[:imported_items].should  eq 10 }    it { @importer[:inserted_items].should  be_nil }    it { @importer[:status].should          eq 'ERROR' }    it { @importer[:status_messages].should be_nil }    it { @importer[:steps].should           eq ["Download do XML","Definindo lista de cores"]}    it { @importer[:start_time].should      eq DateTime.new(2012,03,16,22,24,34,'+00:00') }    it { @importer[:updated_items].should   be_nil }    it { @importer[:updated_at].should      eq DateTime.new(2012,03,16,19,24,34,'-03:00') }    it { @importer[:partner_slug].should    eq "anita" }  end,v
ow! vc já ta na fgon,v
unavailable_products,v
/,v
Vamos criar,v
4f6c54ab65bde10cce0000b7,v
  <dt>Status</dt>  <dd><%= @importer[:status] %></dd>,v
<%= @importer[:partner_slug] %>,v
 ,V
  <dd><%= @importer[:inserted_items] %></dd>,V
updated_items,v
  <dd><%= @importer[:inserted_items] == nil ? 0 : @importer[updated_items] %></dd>,V
:,v
pdated_items,v
  <dd><%= @importer[:updated_items] == nil ? 0 : @importer[:updated_items] %></dd>,v
  <dd><%= @importer[:updated_items] %></dd>,V
unavailable_items,v
uunavailable_itemsnavailable_items,v
  <dd><%= @importer[:unavailable_items] == nil ? 0 : @importer[:unavailable_items] %></dd>,v
',v
@importer[:unavailable_items] ,v
    <dt>Novos</dt>  <dd><%= @importer[:inserted_items] %></dd>,v
 ,v
  <dt>Novos</dt>  <dd><%= @importer[:inserted_items] %></dd>,v
Removidos,v
d,v
  <dt>Status</dt>  <dd><%= @importer[:status] %></dd>,v
  ,V
  <dd><%= @importer[:partner_id] %></dd>,V
  <dt>Partner id</dt>,V
  <dd><%= @importer[:status_messages] %></dd>,V
  <dt>Status messages</dt>,V
Y,v
/%,v
m,v
('%,v
dwqstrftime,v
strftime,v
].,v
  <dt>Data Início</dt>  <dd><%= @importer[:start_time].strftime('%d/%m/%Y') %></dd>,v
T,v
  <dt>Data Fim</dt>  <dd><%= @importer[:end_time] == nil ? '' : @importer[:end_time].strftime('%d/%m/%Y %T') %></dd>,v
  <dt>Data Início</dt>  <dd><%= @importer[:start_time].strftime('%d/%m/%Y %T') %></dd>,v
time,v
End ,v
<%= importer[:end_time] == nil ? '' : importer[:end_time].strftime('%d/%m/%Y %T') %>,v
<%= @importer[:end_time] %>,v
<%= importer[:end_time] == nil ? '' : importer[:end_time].strftime('%d/%m/%Y %T') %><,v
<,v
<%= importer[:start_time].strftime('%d/%m/%Y %T') %>,v
  <dd><%= @importer[:id] %></dd>,V
  <dt>ID</dt>,V
/tmp/cap-depara_parceiros-20120326.csv,v
0,v
count(tb_produtos.id),v
require 'ruby-debug',V
      else,V
/abd/app/cap-admin/shared/bundle,v
users_controller_spec.rb,V
CapProducts::Importer,v
users_controller_spec.rb,v
21/03/2012,v
[   {      "_id":"4f6b890a65bde12fbf000004",      "created_at":"2012-03-22T17:18:18-03:00",      "end_time":"2012-03-01T03:00:00+00:00",      "error_details":null,      "import_time":0,      "imported_items":1325,      "inserted_items":2,      "partner_id":"1",      "partner_slug":"anita",      "start_time":"2012-03-01T03:00:00+00:00",      "status":"RECEIVED",      "status_messages":null,      "steps":null,      "updated_at":"2012-03-22T17:18:18-03:00",      "updated_items":1323   },   {      "_id":"4f6b890a65bde12fbf000005",      "created_at":"2012-03-22T17:18:18-03:00",      "end_time":"2012-03-02T03:00:00+00:00",      "error_details":null,      "import_time":0,      "imported_items":1325,      "inserted_items":2,      "partner_id":"2",      "partner_slug":"anita",      "start_time":"2012-03-02T03:00:00+00:00",      "status":"RECEIVED",      "status_messages":null,      "steps":null,      "updated_at":"2012-03-22T17:18:18-03:00",      "updated_items":1323   },   {      "_id":"4f6b890a65bde12fbf000006",      "created_at":"2012-03-22T17:18:18-03:00",      "end_time":"2012-03-03T03:00:00+00:00",      "error_details":null,      "import_time":0,      "imported_items":1325,      "inserted_items":2,      "partner_id":"3",      "partner_slug":"anita",      "start_time":"2012-03-03T03:00:00+00:00",      "status":"RECEIVED",      "status_messages":null,      "steps":null,      "updated_at":"2012-03-22T17:18:18-03:00",      "updated_items":1323   },   {      "_id":"4f6b890a65bde12fbf000007",      "created_at":"2012-03-22T17:18:18-03:00",      "end_time":"2012-03-04T03:00:00+00:00",      "error_details":null,      "import_time":0,      "imported_items":1325,      "inserted_items":2,      "partner_id":"4",      "partner_slug":"anita",      "start_time":"2012-03-04T03:00:00+00:00",      "status":"RECEIVED",      "status_messages":null,      "steps":null,      "updated_at":"2012-03-22T17:18:18-03:00",      "updated_items":1323   }],v
assigns[:importers],v
/abd/app/cap-admin/releases/20120322185239,v
importers_controller_spec.rb,v
        2.times do          create(:importer, :start_time => Time.parse('2012-02-26'));          create(:importer, :end_time => Time.parse('2012-02-26'));          create(:importer, :start_time => Time.parse('2012-02-26'), :end_time=>Time.parse('2012-02-26'));        end,v
    it { @importer.partner_name.should   eq "KENNER" },V
    self.partner_name     = json['partner_name'],V
  include Mongoid::Slug,V
  slug :partner_namedd,V
