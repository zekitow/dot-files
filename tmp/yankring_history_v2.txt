63861767,v
7,v
iso8601,v
debugger;,v
.,v
),v
t,v
c,v
e,v
j,v
b,v
u,v
s,v
(,v
r,v
a,v
p,v
m,v
i,v
T,v
Time.parse(,v
to_date,v
parse,v
%,v
 ,v
%Y-%m-%d %H:%M:%S %Z,v
              @library_item = JSON.parse(@library_item.to_json),V
              @library_item.inactivated_at.utc,V
debugger,v
{,v
==,v
            #its(["inactivated_at"])  { subject.utc?.should be_true },V
y,v
:,v
d,v
            its(["inactivated_at"])  { should.utc? == @library_item.inactivated_at.utc? },V
            its(["inactivated_at"])  { subject.utc?.should be_true },V
e             ed_at.utc? },v
            its(["inactivated_at"])  { debugddger;should == @library_item.inactivated_at.utc },V
;,v
F,v
            its(["inactivated_at"])  { debugger;should == @library_item.inactivated_at.utc },V
.reload,v
inactive ,v
library_item,v
@,v
eq @library_item.inactive,v
eq @library_item.inactivated_at.try(:utc),v
utc,v
(:,v
try,v
          after   { LibraryItem.delete_all },V
,V
, :inactive => true, :inactivated_at => Time.now,v
            before  { @library_item = Factory(:library_item, :inactive => true, :inactivated_at => Time.now) }            its(["id"])              { should eq @library_item.id }            its(["product_id"])      { should eq @library_item.product_id }            its(["format_id"])       { should eq @library_item.format_id }            its(["order_id"])        { should eq @library_item.order_id }            its(["ess_user_id"])     { should eq @library_item.ess_user_id }            its(["transaction_id"])  { should eq @library_item.transaction_id }            its(["last_version"])    { should eq @library_item.last_version }            its(["last_version_id"]) { should eq @library_item.last_version_id }            its(["inactive"])        { should eq @library_item.inactive }            its(["inactivated_at"])  { should eq @library_item.inactivated_at.try(:utc) },v
          before  { @library_item = Factory(:library_item) },V
    debugger,V
              it { should eq @library_item.attributes_for_feed },V
LibraryItem,v
unscoped,v
to,v
              its(:product_id)      { should eq @library_item.product_id }              its(:format_id)       { should eq @library_item.format_id }              its(:order_id)        { should eq @library_item.order_id }              its(:ess_user_id)     { should eq @library_item.ess_user_id }              its(:transaction_id)  { should eq @library_item.transaction_id }              its(:last_version)    { should eq @library_item.last_version }              its(:last_version_id) { should eq @library_item.last_version_id }              its(:inactive)        { should eq @library_item.inactive }              its(:inactivated_at)  { should eq @library_item.inactivated_at.try(:utc) },V
",v
[",v
=> self.=> self.=> self.=> self.=> self.=> self.=> self.=> self.=> self.=> self.,8
>,v
      :id => self.id, :product_id => self.product_id, :format_id => self.format_id,      :order_id => self.order_id, :ess_user_id => self.ess_user_id, :transaction_id => self.transaction_id,      :last_version => self.last_version, :last_version_id => self.last_version_id,      :inactive => self.inactive, :inactivated_at => self.inactivated_at.try(:utc),v
          before(:all) { @user = Factory(:user) },V
cwusuarios,v
          subject { Hash.from_xml(get('/feeds/usuarios').body)["data"]["usuarios"].last }          before(:all) { @user = Factory(:user) },v
          ,V
          context "and library item is active",V
[color]  branch = auto  diff = auto  status = auto[color "branch"]  current = yellow reverse  local = yellow  remote = green[color "diff"]  meta = yellow bold  frag = magenta bold  old = red bold  new = green bold[color "status"]  added = yellow  changed = green  untracked = cyan,v
1346638,v
8,v
1,v
-,v
dddd fi,V
#!/usr/bin/env bash# This is an RVM Project .rvmrc file, used to automatically load the ruby# development environment upon cd'ing into the directory# First we specify our desired <ruby>[@<gemset>], the @gemset name is optional,# Only full ruby name is supported here, for short names use:#     echo "rvm use ree" > .rvmrcenvironment_id="ree-1.8.7-2011.03@asiclient"# Uncomment the following lines if you want to verify rvm version per project# rvmrc_rvm_version="1.14.3 (stable)" # 1.10.1 seams as a safe start# eval "$(echo ${rvm_version}.${rvmrc_rvm_version} | awk -F. '{print "[[ "$1*65536+$2*256+$3" -ge "$4*65536+$5*256+$6" ]]"}' )" || {#   echo "This .rvmrc file requires at least RVM ${rvmrc_rvm_version}, aborting loading."#   return 1# }# First we attempt to load the desired environment directly from the environment# file. This is very fast and efficient compared to running through the entire# CLI and selector. If you want feedback on which environment was used then# insert the word 'use' after --create as this triggers verbose mode.if [[ -d "${rvm_path:-$HOME/.rvm}/environments"  && -s "${rvm_path:-$HOME/.rvm}/environments/$environment_id" ]]then  \. "${rvm_path:-$HOME/.rvm}/environments/$environment_id"  [[ -s "${rvm_path:-$HOME/.rvm}/hooks/after_use" ]] &&    \. "${rvm_path:-$HOME/.rvm}/hooks/after_use" || true  if [[ $- == *i* ]] # check for interactive shells  then echo "Using: $(tput setaf 2)$GEM_HOME$(tput sgr0)" # show the user the ruby and gemset they are using in green  else echo "Using: $GEM_HOME" # don't use colors in non-interactive shells  fielse  # If the environment file has not yet been created, use the RVM CLI to select.  rvm --create use  "$environment_id" || {    echo "Failed to create RVM environment '${environment_id}'."    return 1  }fi# If you use bundler, this might be useful to you:# if [[ -s Gemfile ]] && {#   ! builtin command -v bundle >/dev/null ||#   builtin command -v bundle | GREP_OPTIONS= \grep $rvm_path/bin/bundle >/dev/null# }# then#   printf "%b" "The rubygem 'bundler' is not installed. Installing it now.\n"#   gem install bundler# fi# if [[ -s Gemfile ]] && builtin command -v bundle >/dev/null# then#   bundle install | GREP_OPTIONS= \grep -vE '^Using|Your bundle is complete'#,v
cwfiles = nil,v
true,v
server1,v
  - "server2:11211:2",V
admin_development,v
spec/lib/readers/partners/base_spec.rb,v
    - ORACLE_HOME=/usr/lib/oracle/11.2/client64    - LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client64/lib/    - TNS_ADMIN=/abd/app/ess/current/config,V
Time.now.in_time_zone("Eastern Time (US & Canada)"),v
sudo -u mongodb mongod -f /etc/mongodb.conf --repair,v
couldn't connect to server 127.0.0.1 shell/mongo.js:84,v
deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen,v
robbyrussell,v
/usr/include/sys/types.h,v
should == 200,v
      subject { last_response },V
        subject { last_response },V
        end,V
a_success_request,v
          before { post '/assinaturas/consultar-voucher', valid_params }          its(:status) { should be_a_success_request }          its(:body)   { should be_empty }        end,v
k,v
post '/assinaturas/consultar-voucher', valid_params },V
